{"version":3,"file":"static/js/705.d5147108.chunk.js","mappings":"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","sources":["api.js","components/SearchForm/SearchForm.jsx","components/SearchResults/SearchResults.styled.js","components/SearchResults/SearchResults.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n// const REACT_APP_API_KEY = 'd06304d9e64e03eb8f54c91af082a1f3';\n\nconst AUTH_TOKEN =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkMDYzMDRkOWU2NGUwM2ViOGY1NGM5MWFmMDgyYTFmMyIsInN1YiI6IjY0NzhlNTE5Y2Y0YjhiMDE0MThkZWI5YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.rtCRi_Yj7uZNfshhCG6H9Eyo6JMNm4bccFC0_mOpATI';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n\nexport const imageBaseURL = 'https://image.tmdb.org/t/p/';\n\n// ########################################\n\n// export async function getTrendingMovies() {\n//   const response = await axios.get('/trending/movie/day');\n//   return response.data;\n// }\n","import { useState } from 'react';\n\n// ###############################\n\nexport default function SearchForm({ action }) {\n  //\n  const [input, setInput] = useState('');\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (input.trim() !== '') action({ query: input });\n    if (input.trim() === '') alert('Your search request is empty');\n\n    setInput('');\n    // or\n    // e.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" onChange={handleChange} value={input} />\n        <button type=\"submit\">Search</button>\n      </form>\n    </>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport const ListItem = styled.li`\n  width: 175px;\n  min-width: 175px;\n  font-size: 0.8rem;\n\n  border: 0.5px solid lightGray;\n  border-radius: 6px;\n  overflow: hidden;\n`;\n\nexport const Image = styled.img`\n  max-width: 100%;\n`;\n\nexport const Meta = styled.div`\n  padding: 0 10px;\n  color: black;\n`;\n\nexport const Title = styled.p`\n  font-weight: bold;\n`;\nexport const Year = styled.p`\n  color: gray;\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  font-weight: normal;\n\n  :hover,\n  :focus {\n    text-decoration: none;\n  }\n`;\n","// import { Link } from 'react-router-dom';\nimport {\n  Image,\n  List,\n  ListItem,\n  Meta,\n  StyledLink,\n  Title,\n  Year,\n} from './SearchResults.styled';\nimport { imageBaseURL } from 'api';\n\nexport default function SearchResults({ data, query, isLoading }) {\n  return (\n    <>\n      {data.length === 0 && !isLoading && (\n        <div style={{ marginTop: '10px', color: 'rgb(45, 187, 208)' }}>\n          Sorry, your query returned no matches\n        </div>\n      )}\n\n      {data && (\n        <List>\n          {data.map(\n            ({ id, title, poster_path = null, release_date = null }) => {\n              const year = release_date\n                ? `(${release_date.slice(0, 4)})`\n                : null;\n\n              return (\n                <ListItem key={id}>\n                  <StyledLink\n                    to={`/movies/${id}`}\n                    state={{ from: `/movies?query=${query}` }}\n                  >\n                    <div>\n                      <Image\n                        src={\n                          poster_path\n                            ? `${imageBaseURL}w185${poster_path}`\n                            : 'https://fakeimg.pl/175x260?text=No+image&font=noto'\n                        }\n                        // srcSet={`${imageBaseURL}w185${profile_path} 1x, ${imageBaseURL}w185${profile_path} 2x`}\n                        alt={title}\n                      />\n\n                      <Meta>\n                        <Title>{title}</Title>\n                        {release_date && <Year>{year}</Year>}\n                      </Meta>\n                    </div>\n                  </StyledLink>\n                </ListItem>\n              );\n            }\n          )}\n        </List>\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport axios from 'axios';\nimport 'api';\n\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport SearchResults from 'components/SearchResults/SearchResults';\n\n// ###############################\n\nexport default function Movies() {\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') return;\n\n    let cancel;\n\n    // GET 'https://api.themoviedb.org/3/search/movie?query=batman&include_adult=true&language=en-US&page=1'\n\n    async function getResults() {\n      try {\n        setError(null);\n        setIsLoading(true);\n\n        const response = await axios.get(`/search/movie?query=${query}`, {\n          cancelToken: new axios.CancelToken(c => (cancel = c)),\n        });\n\n        setResults(response.data.results);\n        console.log('response.data: ', response.data);\n      } catch ({ message }) {\n        if (message !== 'canceled') {\n          setError(message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getResults();\n\n    return () => cancel();\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm action={setSearchParams} />\n      {isLoading && <div>Loading...</div>}\n      {error && <div>{error}</div>}\n\n      {results && (\n        <SearchResults data={results} isLoading={isLoading} query={query} />\n      )}\n    </>\n  );\n}\n"],"names":["axios","imageBaseURL","SearchForm","action","useState","input","setInput","onSubmit","e","preventDefault","trim","query","alert","type","onChange","target","value","List","styled","ListItem","Image","Meta","Title","Year","StyledLink","Link","SearchResults","data","isLoading","length","style","marginTop","color","map","id","title","poster_path","release_date","year","slice","to","state","from","src","alt","Movies","results","setResults","error","setError","setIsLoading","useSearchParams","searchParams","setSearchParams","get","useEffect","cancel","getResults","cancelToken","c","response","console","log","message"],"sourceRoot":""}